(window.webpackJsonp=window.webpackJsonp||[]).push([[233],{664:function(t,a,s){"use strict";s.r(a);var n=s(16),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"渲染树构建、布局及绘制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染树构建、布局及绘制"}},[t._v("#")]),t._v(" 渲染树构建、布局及绘制")]),t._v(" "),s("p",[t._v("CSSOM 树和 DOM 树合并成渲染树，然后用于计算每个可见元素的布局，并输出给绘制流程，将像素渲染到屏幕上。优化上述每一个步骤对实现最佳渲染性能至关重要。")]),t._v(" "),s("p",[t._v("在前面介绍构建对象模型的章节中，我们根据 HTML 和 CSS 输入构建了 DOM 树和 CSSOM 树。 不过，它们都是独立的对象，分别网罗文档不同方面的信息：一个描述内容，另一个则是描述需要对文档应用的样式规则。我们该如何将两者合并，让浏览器在屏幕上渲染像素呢？")]),t._v(" "),s("h3",{attrs:{id:"tl-dr"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tl-dr"}},[t._v("#")]),t._v(" TL;DR")]),t._v(" "),s("ul",[s("li",[t._v("DOM 树与 CSSOM 树合并后形成渲染树。")]),t._v(" "),s("li",[t._v("渲染树只包含渲染网页所需的节点。")]),t._v(" "),s("li",[t._v("布局计算每个对象的精确位置和大小。")]),t._v(" "),s("li",[t._v("最后一步是绘制，使用最终渲染树将像素渲染到屏幕上。")])]),t._v(" "),s("p",[t._v("第一步是让浏览器将 DOM 和 CSSOM 合并成一个“渲染树”，网罗网页上所有可见的 DOM 内容，以及每个节点的所有 CSSOM 样式信息。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://developers.google.cn/web/fundamentals/performance/critical-rendering-path/images/render-tree-construction.png",alt:"将 DOM 与 CSSOM 合并以形成渲染树"}})]),t._v(" "),s("p",[t._v("为构建渲染树，浏览器大体上完成了下列工作：")]),t._v(" "),s("ol",[s("li",[t._v("从 DOM 树的根节点开始遍历每个可见节点。\n"),s("ul",[s("li",[t._v("某些节点不可见（例如脚本标记、元标记等），因为它们不会体现在渲染输出中，所以会被忽略。")]),t._v(" "),s("li",[t._v("某些节点通过 CSS 隐藏，因此在渲染树中也会被忽略，例如，上例中的 span 节点---不会出现在渲染树中，---因为有一个显式规则在该节点上设置了“display: none”属性。")])])]),t._v(" "),s("li",[t._v("对于每个可见节点，为其找到适配的 CSSOM 规则并应用它们。")]),t._v(" "),s("li",[t._v("发射可见节点，连同其内容和计算的样式。")])]),t._v(" "),s("p",[s("strong",[t._v("Note:")]),t._v(" 简单提一句，请注意 "),s("code",[t._v("visibility: hidden")]),t._v(" 与 "),s("code",[t._v("display: none")]),t._v(" 是不一样的。前者隐藏元素，但元素仍占据着布局空间（即将其渲染成一个空框），而后者 ("),s("code",[t._v("display: none")]),t._v(") 将元素从渲染树中完全移除，元素既不可见，也不是布局的组成部分。")]),t._v(" "),s("p",[t._v("最终输出的渲染同时包含了屏幕上的所有可见内容及其样式信息。"),s("strong",[t._v("有了渲染树，我们就可以进入“布局”阶段。")])]),t._v(" "),s("p",[t._v("到目前为止，我们计算了哪些节点应该是可见的以及它们的计算样式，但我们尚未计算它们在设备"),s("a",{attrs:{href:"https://developers.google.cn/web/fundamentals/design-and-ux/responsive#set-the-viewport",target:"_blank",rel:"noopener noreferrer"}},[t._v("视口"),s("OutboundLink")],1),t._v("内的确切位置和大小---这就是“布局”阶段，也称为“自动重排”。")]),t._v(" "),s("p",[t._v("为弄清每个对象在网页上的确切大小和位置，浏览器从渲染树的根节点开始进行遍历。让我们考虑下面这样一个简单的实例：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token doctype"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<!")]),s("span",{pre:!0,attrs:{class:"token doctype-tag"}},[t._v("DOCTYPE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token name"}},[t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("viewport"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("width=device-width,initial-scale=1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("title")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Critial Path: Hello world!"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("title")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token special-attr"}},[s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("style")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),s("span",{pre:!0,attrs:{class:"token value css language-css"}},[s("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 50%")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token special-attr"}},[s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("style")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),s("span",{pre:!0,attrs:{class:"token value css language-css"}},[s("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 50%")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Hello world!"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[s("a",{attrs:{href:"https://googlesamples.github.io/web-fundamentals/fundamentals/performance/critical-rendering-path/nested.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("试一下"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("以上网页的正文包含两个嵌套 div：第一个（父）div 将节点的显示尺寸设置为视口宽度的 50%，---父 div 包含的第二个 div---将其宽度设置为其父项的 50%；即视口宽度的 25%。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://developers.google.cn/web/fundamentals/performance/critical-rendering-path/images/layout-viewport.png",alt:"计算布局信息"}})]),t._v(" "),s("p",[t._v("布局流程的输出是一个“盒模型”，它会精确地捕获每个元素在视口内的确切位置和尺寸：所有相对测量值都转换为屏幕上的绝对像素。")]),t._v(" "),s("p",[t._v("最后，既然我们知道了哪些节点可见、它们的计算样式以及几何信息，我们终于可以将这些信息传递给最后一个阶段：将渲染树中的每个节点转换成屏幕上的实际像素。这一步通常称为“绘制”或“栅格化”。")]),t._v(" "),s("p",[t._v("上述步骤都需要浏览器完成大量工作，所以相当耗时。不过，Chrome DevTools 可以帮助我们对上述所有三个阶段进行深入的了解。让我们看一下最初“hello world”示例的布局阶段：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://developers.google.cn/web/fundamentals/performance/critical-rendering-path/images/layout-timeline.png",alt:"在 DevTools 中评估布局"}})]),t._v(" "),s("ul",[s("li",[t._v("“Layout”事件在时间线中捕获渲染树构建以及位置和尺寸计算。")]),t._v(" "),s("li",[t._v("布局完成后，浏览器会立即发出“Paint Setup”和“Paint”事件，将渲染树转换成屏幕上的像素。")])]),t._v(" "),s("p",[t._v("执行渲染树构建、布局和绘制所需的时间将取决于文档大小、应用的样式，以及运行文档的设备：文档越大，浏览器需要完成的工作就越多；样式越复杂，绘制需要的时间就越长（例如，单色的绘制开销“较小”，而阴影的计算和渲染开销则要“大得多”）。")]),t._v(" "),s("p",[t._v("最后将在视口中看到下面的网页：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://developers.google.cn/web/fundamentals/performance/critical-rendering-path/images/device-dom-small.png",alt:"完成渲染的 Hello World 网页"}})]),t._v(" "),s("p",[t._v("下面简要概述了浏览器完成的步骤：")]),t._v(" "),s("ol",[s("li",[t._v("处理 HTML 标记并构建 DOM 树。")]),t._v(" "),s("li",[t._v("处理 CSS 标记并构建 CSSOM 树。")]),t._v(" "),s("li",[t._v("将 DOM 与 CSSOM 合并成一个渲染树。")]),t._v(" "),s("li",[t._v("根据渲染树来布局，以计算每个节点的几何信息。")]),t._v(" "),s("li",[t._v("将各个节点绘制到屏幕上。")])]),t._v(" "),s("p",[t._v("我们的演示网页看起来可能很简单，实际上却需要完成相当多的工作。如果 DOM 或 CSSOM 被修改，您只能再执行一遍以上所有步骤，以确定哪些像素需要在屏幕上进行重新渲染。")]),t._v(" "),s("p",[s("strong",[t._v("*优化关键渲染路径*就是指最大限度缩短执行上述第 1 步至第 5 步耗费的总时间。")]),t._v(" 这样一来，就能尽快将内容渲染到屏幕上，此外还能缩短首次渲染后屏幕刷新的时间，即为交互式内容实现更高的刷新率。")])])}),[],!1,null,null,null);a.default=e.exports}}]);