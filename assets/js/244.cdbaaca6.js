(window.webpackJsonp=window.webpackJsonp||[]).push([[244],{579:function(e,n,t){"use strict";t.r(n);var a=t(16),s=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"减小前端大小"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#减小前端大小"}},[e._v("#")]),e._v(" 减小前端大小")]),e._v(" "),t("p",[e._v("优化应用程序时，要做的第一件事就是使其尽可能小。这是使用 webpack 的方法。")]),e._v(" "),t("h2",{attrs:{id:"使用生产模式-仅适用于-webpack-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用生产模式-仅适用于-webpack-4"}},[e._v("#")]),e._v(" 使用生产模式（仅适用于 webpack 4）")]),e._v(" "),t("p",[e._v("Webpack 4 引入"),t("a",{attrs:{href:"https://webpack.js.org/concepts/mode/",target:"_blank",rel:"noopener noreferrer"}},[e._v("了新"),t("code",[e._v("mode")]),e._v("标志"),t("OutboundLink")],1),e._v("。您可以将此标志设置为"),t("code",[e._v("'development'")]),e._v("或"),t("code",[e._v("'production'")]),e._v("暗示 webpack 您正在针对特定环境构建应用程序：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// webpack.config.js\nmodule.exports = {\n  mode: 'production',\n};\n")])])]),t("p",[t("code",[e._v("production")]),e._v("在构建用于生产的应用程序时，请确保启用该模式。这将使 webpack 应用优化，如最小化，删除库中仅开发代码"),t("a",{attrs:{href:"https://medium.com/webpack/webpack-4-mode-and-optimization-5423a6bc597a",target:"_blank",rel:"noopener noreferrer"}},[e._v("等"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"进一步阅读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进一步阅读"}},[e._v("#")]),e._v(" 进一步阅读")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://medium.com/webpack/webpack-4-mode-and-optimization-5423a6bc597a",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("mode")]),e._v("标志配置的具体内容"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"启用缩小"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启用缩小"}},[e._v("#")]),e._v(" 启用缩小")]),e._v(" "),t("p",[e._v("**注意：**大多数仅适用于 webpack 3。如果您"),t("a",{attrs:{href:"https://developers.google.cn/web/fundamentals/performance/webpack/decrease-frontend-size#enable-the-production-mode",target:"_blank",rel:"noopener noreferrer"}},[e._v("在生产模式下"),t("OutboundLink")],1),e._v("使用 "),t("a",{attrs:{href:"https://developers.google.cn/web/fundamentals/performance/webpack/decrease-frontend-size#enable-the-production-mode",target:"_blank",rel:"noopener noreferrer"}},[e._v("webpack 4"),t("OutboundLink")],1),e._v("，则捆绑级别的缩小已启用-您仅需启用"),t("a",{attrs:{href:"https://developers.google.cn/web/fundamentals/performance/webpack/decrease-frontend-size#loader-specific-options",target:"_blank",rel:"noopener noreferrer"}},[e._v("特定"),t("OutboundLink")],1),e._v("于 "),t("a",{attrs:{href:"https://developers.google.cn/web/fundamentals/performance/webpack/decrease-frontend-size#loader-specific-options",target:"_blank",rel:"noopener noreferrer"}},[e._v("加载程序的选项"),t("OutboundLink")],1),e._v("。")]),e._v(" "),t("p",[e._v("缩小是指通过删除多余的空格，缩短变量名等方式压缩代码。像这样：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// Original code\nfunction map(array, iteratee) {\n  let index = -1;\n  const length = array == null ? 0 : array.length;\n  const result = new Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n")])])]),t("p",[e._v("↓")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// Minified code\nfunction map(n,r){let t=-1;for(const a=null==n?0:n.length,l=Array(a);++t<a;)l[t]=r(n[t],t,n);return l}\n")])])]),t("p",[e._v("Webpack 支持两种减少代码的方式："),t("em",[e._v("捆绑包级别的减少")]),e._v("和 "),t("em",[e._v("特定于加载程序的 options")]),e._v("。它们应同时使用。")]),e._v(" "),t("h3",{attrs:{id:"捆绑级别的缩小"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#捆绑级别的缩小"}},[e._v("#")]),e._v(" 捆绑级别的缩小")]),e._v(" "),t("p",[e._v("捆绑包级别的压缩会在编译后压缩整个捆绑包。运作方式如下：")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("您编写如下代码：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// comments.js import './comments.css' ; 导出功能渲染（数据，目标）{   控制台。日志（'Rendered！' ）; }\n")])])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n2. Webpack 将其编译为以下内容：\n\n")])])]),t("p",[e._v("// bundle.js（部分）“使用严格”；Object 。defineProperty （** webpack_exports** ，“ **esModule ”，{ value ：true }）；/ "),t("em",[e._v("和声导出（不可变）")]),e._v(" / "),t("strong",[e._v("webpack_exports ** [“ render ”] =渲染；/ "),t("em",[e._v("和谐引入")]),e._v(" / var "),t("strong",[e._v("WEBPACK_IMPORTED_MODULE_0")]),e._v("comments_css")]),e._v(" = "),t("strong",[e._v("webpack_require ** （1 ）；/ "),t("em",[e._v("和谐导入")]),e._v(" / var "),t("strong",[e._v("WEBPACK_IMPORTED_MODULE_0")]),e._v("comments_css_js")]),e._v("_default = **webpack_require __ 。n")]),e._v(" "),t("p",[e._v("（** WEBPACK_IMPORTED_MODULE_0**comments_css__ ）； 函数渲染（数据，目标）{ 控制台。日志（“已渲染！” ）；}")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n3. 压缩器将其压缩为以下内容：\n\n")])])]),t("p",[e._v("//缩小了 bundle.js（的一部分）“ use strict” ；功能 t （e ，n ）{ 控制台。log （“ Rendered！” ）} 对象。defineProperty （n ，“ __esModule” ，{ value ：！0 }），n 。渲染= t ; var o = r （1 ）; [R 。n （o ）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n**在 webpack 4 中，**在生产模式下和不使用生产模式下，都自动启用了捆绑包级别的缩小。它[在后台](https://github.com/mishoo/UglifyJS2)使用[UglifyJS 缩小程序](https://github.com/mishoo/UglifyJS2) 。（如果您需要禁用缩小功能，只需使用开发模式或将其传递`false`给该`optimization.minimize`选项即可。）\n\n**在 webpack 3 中，**您需要 直接使用[UglifyJS 插件](https://github.com/webpack-contrib/uglifyjs-webpack-plugin)。该插件与 webpack 捆绑在一起；要启用它，请将其添加到`plugins` 配置部分：\n\n")])])]),t("p",[e._v("// webpack.config.js\nconst webpack = require('webpack');")]),e._v(" "),t("p",[e._v("module.exports = {\nplugins: [\nnew webpack.optimize.UglifyJsPlugin(),\n],\n};")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n**注意：**在 webpack 3 中，UglifyJS 插件无法编译 ES2015 +（ES6 +）代码。这意味着，如果您的代码使用类，箭头函数或其他新语言功能，而您没有将它们编译到 ES5 中，则插件将引发错误。\n\n如果需要编译新语法，请使用 [uglifyjs-webpack-plugin](https://github.com/webpack-contrib/uglifyjs-webpack-plugin)软件包。这是与 webpack 捆绑在一起的插件，但是更新，并且可以编译 ES2015 +代码。\n\n### 加载程序特定的选项\n\n减少代码的第二种方法是特定于加载程序的选项（[什么是加载程序](https://webpack.js.org/concepts/loaders/)）。使用加载程序选项，您可以压缩压缩器无法压缩的内容。例如，当您使用导入 CSS 文件时 [`css-loader`](https://github.com/webpack-contrib/css-loader)，该文件将被编译为字符串：\n\n")])])]),t("p",[e._v("/_ comments.css _/\n.comment {\ncolor: black;\n}")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n↓\n\n")])])]),t("p",[e._v("//缩小的 bundle.js（部分）\nexports = module 。出口= "),t("strong",[e._v("webpack_require")]),e._v(" （1 ）（），\n出口。推（[ 模块。我，“的.comment {\\ r \\ n 颜色：黑色; \\ r \\ N}” ， “” ]）;")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n压缩程序无法压缩此代码，因为它是一个字符串。为了减少文件内容，我们需要配置加载器来做到这一点：\n\n")])])]),t("p",[e._v("// webpack.config.js 模块。出口= { 模块：{ 规则：[ { 测试：/ .css$/ ，使用：[ 'style-loader' ，{ 加载器：'css-loader' ，选项：{ 最小化：真} }，]，}，]，}，};")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n### 进一步阅读\n\n- [UglifyJsPlugin 文档](https://github.com/webpack-contrib/uglifyjs-webpack-plugin)\n- 其他受欢迎的缩小器：[Babel Minify](https://github.com/webpack-contrib/babel-minify-webpack-plugin)，[Google Closure 编译器](https://github.com/roman01la/webpack-closure-compiler)\n\n## 指定 `NODE_ENV=production`\n\n**注意：**这仅是 webpack 3。如果您[在生产模式下](https://developers.google.cn/web/fundamentals/performance/webpack/decrease-frontend-size#enable-the-production-mode)使用 [webpack 4](https://developers.google.cn/web/fundamentals/performance/webpack/decrease-frontend-size#enable-the-production-mode)，则`NODE_ENV=production` 优化已启用-随时跳过本节。\n\n减小前端大小的另一种方法是将 代码中的`NODE_ENV` [环境变量](https://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them)设置为 value `production`。\n\n图书馆读取`NODE_ENV`变量以检测在开发或生产中应该以哪种模式工作。一些库基于此变量的行为会有所不同。例如，当`NODE_ENV`未设置`production`为时，Vue.js 会进行其他检查并显示警告：\n\n")])])]),t("p",[e._v("// vue/dist/vue.runtime.esm.js\n// …\nif (process.env.NODE_ENV !== 'production') {\nwarn('props must be strings when using array syntax.');\n}\n// …")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\nReact 的工作原理类似–它加载了包含警告的开发版本：\n\n")])])]),t("p",[e._v("// react/index.js\nif (process.env.NODE_ENV === 'production') {\nmodule.exports = require('./cjs/react.production.min.js');\n} else {\nmodule.exports = require('./cjs/react.development.js');\n}")]),e._v(" "),t("p",[e._v("// react/cjs/react.development.js\n// …\nwarning$3(\ncomponentClass.getDefaultProps.isReactClassApproved,\n'getDefaultProps is only used on classic React.createClass ' +\n'definitions. Use a static property named "),t("code",[e._v("defaultProps")]),e._v(" instead.'\n);\n// …")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n这种检查和警告通常在生产中是不必要的，但是它们保留在代码中并增加了库的大小。**在 webpack 4 中，**通过添加以下`optimization.nodeEnv: 'production'`选项将其删除：\n\n")])])]),t("p",[e._v("// webpack.config.js (for webpack 4)\nmodule.exports = {\noptimization: {\nnodeEnv: 'production',\nminimize: true,\n},\n};")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n**在 webpack 3 中，**使用[`DefinePlugin`](https://webpack.js.org/plugins/define-plugin/)代替：\n\n")])])]),t("p",[e._v("// webpack.config.js (for webpack 3)\nconst webpack = require('webpack');")]),e._v(" "),t("p",[e._v("module.exports = {\nplugins: [\nnew webpack.DefinePlugin({\n'process.env.NODE_ENV': '\"production\"',\n}),\nnew webpack.optimize.UglifyJsPlugin(),\n],\n};")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n这两个`optimization.nodeEnv`选项和`DefinePlugin`工作方式相同-它们取代所有出现的`process.env.NODE_ENV`与指定的值。通过上面的配置：\n\n1. 的 WebPack 将取代所有出现的\n\n")])])]),t("p",[e._v("process.env.NODE_ENV")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n有\n\n")])])]),t("p",[e._v('"production"')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n：\n\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("// vue / dist / vue.runtime.esm.js if （typeof val === 'string' ）{   name = camelize （val ）;   res [ name ] = { type ：null }; } 否则如果（过程。ENV 。NODE_ENV ==！'生产'）{   警告（'使用数组语法道具时必须是字符串。' ）; }\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n↓\n\n")])])]),t("p",[e._v("// vue / dist / vue.runtime.esm.js if （typeof val === 'string' ）{ name = camelize （val ）; res [ name ] = { type ：null }; } else if （“ production” ！== 'production' ）{ 警告（“使用数组语法时，props 必须是字符串。” ）；}")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n2. 然后\n\n，minifier\n\n将删除所有此类\n\n")])])]),t("p",[e._v("if")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n分支–因为\n\n")])])]),t("p",[e._v("\"production\" !== 'production'")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n始终为 false，并且插件了解这些分支内的代码将永远不会执行：\n\n")])])]),t("p",[e._v("// vue / dist / vue.runtime.esm.js if （typeof val === 'string' ）{ name = camelize （val ）; res [ name ] = { type ：null }; } else if （“ production” ！== 'production' ）{ 警告（“使用数组语法时，props 必须是字符串。” ）；}")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n↓\n\n")])])]),t("p",[e._v("// vue / dist / vue.runtime.esm.js（不缩小）if （typeof val === 'string' ）{ name = camelize （val ）; res [ name ] = { type ：null }; }")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n### 进一步阅读\n\n- [什么是“环境变量”](https://superuser.com/questions/284342/what-are-path-and-other-environment-variables-and-how-can-i-set-or-use-them)\n- 的 WebPack 文档有关：[`DefinePlugin`](https://webpack.js.org/plugins/define-plugin/)， [`EnvironmentPlugin`](https://webpack.js.org/plugins/environment-plugin/)\n\n## 使用 ES 模块\n\n减小前端大小的另一种方法是使用[ES 模块](https://ponyfoo.com/articles/es6-modules-in-depth)。\n\n使用 ES 模块时，webpack 可以进行树状摇动。摇树是指捆绑器遍历整个依赖关系树，检查使用了哪些依赖关系，并删除未使用的依赖关系。因此，如果您使用 ES 模块语法，则 webpack 可以消除未使用的代码：\n\n1. 您编写的文件具有多个导出，但是该应用仅使用其中一个：\n\n")])])]),t("p",[e._v("// comment.js export const render = （）=> { 返回“已渲染！” ; }; 导出 const commentRestEndpoint = '/ rest / comments' ; // index.js 进口{ 呈现} 从” ./comments.js' ; 渲染（）;")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n2. Webpack 知道\n\n")])])]),t("p",[e._v("commentRestEndpoint")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n不使用它，并且不会在捆绑包中生成单独的导出点：\n\n")])])]),t("p",[e._v("// bundle.js（部分对应于 comments.js） （功能（模块，"),t("strong",[e._v("webpack_exports")]),e._v(" ，"),t("strong",[e._v("webpack_require")]),e._v(" ）{ “使用严格” ; const 的渲染= （）=> { 返回'渲染！' ; }; / "),t("em",[e._v("和谐出口（不可变）")]),e._v(" / "),t("strong",[e._v("webpack_exports")]),e._v(" [ “ a” ] = 渲染; const commentRestEndpoint = '/ rest / comments' ; / _未使用的和声导出 commentRestEndpoint _ / }）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n3. 压缩器\n\n删除未使用的变量：\n\n")])])]),t("p",[e._v("// bundle.js（与 comment.js 对应的部分）\n（function（n，e）{“使用严格”; var r = function（）{返回“ Rendered！”}; eb = r}）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\n即使它们是用 ES 模块编写的，这也适用于库。\n\n**注意：**在 webpack 中，没有缩小器就无法摇树。Webpack 只是删除未使用的导出的导出语句；是删除器删除未使用的代码。因此，如果您在没有压缩程序的情况下编译捆绑软件，捆绑软件将不会变得更小。\n\n不过，您不需要完全使用 webpack 的内置 minifier（`UglifyJsPlugin`）。任何支持清除死代码的压缩程序（例如[Babel Minify 插件](https://github.com/webpack-contrib/babel-minify-webpack-plugin) 或[Google Closure Compiler 插件](https://github.com/roman01la/webpack-closure-compiler)）都可以解决问题。\n\n**警告：**不要将 ES 模块意外编译成 CommonJS 模块。\n\n如果将 Babel 与`babel-preset-env`或结合使用`babel-preset-es2015`，请检查这些预设的设置。默认情况下，他们 transpile ES“ `import`并`export`以 CommonJS 的” `require`和 `module.exports`。[传递`{ modules: false }` 选项](https://github.com/babel/babel/tree/master/packages/babel-preset-env)以禁用此功能。\n\n以打字稿一样：记得设置`{ "compilerOptions": { "module": "es2015" } }` 你的`tsconfig.json`。\n\n### 进一步阅读\n\n- [“ ES6 深度模块”](https://ponyfoo.com/articles/es6-modules-in-depth)\n- Webpack [关于摇树的](https://webpack.js.org/guides/tree-shaking/)文档\n\n## 优化图像\n\n图片占页面大小[的一半以上](http://httparchive.org/interesting.php?a=All&l=Oct 16 2017)。尽管它们不像 JavaScript 那样重要（例如，它们不阻止渲染），但它们仍然占用了很大一部分带宽。使用`url-loader`，`svg-url-loader`并`image-webpack-loader`给他们优化的 WebPack。\n\n[`url-loader`](https://github.com/webpack-contrib/url-loader)将小型静态文件内联到应用程序中。如果不进行配置，它将获取一个传递的文件，将其放在已编译的包旁边，然后返回该文件的 url。但是，如果指定该`limit`选项，它将把小于此限制的文件编码为[Base64 数据 URL，](https://css-tricks.com/data-uris/)并返回此 URL。这会将图像内联到 JavaScript 代码中并保存 HTTP 请求：\n\n')])])]),t("p",[e._v("// webpack.config.js 模块。出口= { 模块：{ 规则：[ { 测试：/ .(jpe?g|png|gif)$/ ， 加载器：'url-loader' ， 选项：{ //内联文件小于 10 kB（10240 字节） 限制：10 * 1024 ，}，}，]，} };")]),e._v(" "),t("p",[e._v("// index.js 从'./image.png' 导入 imageUrl ; //→ 如果 image.png 小于 10 kB，则"),t("code",[e._v("imageUrl")]),e._v("将包含//编码后的图像：'data：image / png; base64，iVBORw0KGg…' // //如果 image.png 大于 10 kB，则加载程序将创建一个新文件，//和"),t("code",[e._v("imageUrl")]),e._v("将包含其网址："),t("code",[e._v("/ 2fcd56a1920be.png")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n**注意：内**联图像减少了单独请求的数量，这很好（[即使使用 HTTP / 2](https://blog.octo.com/en/http2-arrives-but-sprite-sets-aint-no-dead/)），但是会增加捆绑软件的下载/解析时间和内存消耗。确保不要嵌入大图或大图–否则捆绑时间的增加将超过内联的好处。\n\n[`svg-url-loader`](https://github.com/bhovhannes/svg-url-loader)的工作原理与`url-loader`– 一样，只是它使用[URL 编码](https://developer.mozilla.org/en-US/docs/Glossary/percent-encoding)而不是 Base64 编码文件。这对于 SVG 图像很有用-因为 SVG 文件只是纯文本，所以这种编码更有效：\n\n")])])]),t("p",[e._v("// webpack.config.js\nmodule.exports = {\nmodule: {\nrules: [\n{\ntest: /.svg$/,\nloader: 'svg-url-loader',\noptions: {\n// Inline files smaller than 10 kB (10240 bytes)\nlimit: 10 * 1024,\n// Remove the quotes from the url\n// (they’re unnecessary in most cases)\nnoquotes: true,\n},\n},\n],\n},\n};")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n**注意：**svg-url-loader 具有改善 Internet Explorer 支持的选项，但会恶化其他浏览器的内联。如果需要支持此浏览器，请[应用`iesafe: true` 选项](https://github.com/bhovhannes/svg-url-loader#iesafe)。\n\n[`image-webpack-loader`](https://github.com/tcoopman/image-webpack-loader)压缩通过它的图像。它支持 JPG，PNG，GIF 和 SVG 图像，因此我们将在所有这些类型中使用它。\n\n该加载程序不会将图像嵌入到应用程序中，因此它必须与`url-loader`和 配对使用`svg-url-loader`。为避免将其复制粘贴到两个规则中（一个用于 JPG / PNG / GIF 图像，另一个用于 SVG 图像），我们将将此加载器作为单独的规则包括在内[`enforce: 'pre'`](https://webpack.js.org/configuration/module/#rule-enforce)：\n\n")])])]),t("p",[e._v("// webpack.config.js\nmodule.exports = {\nmodule: {\nrules: [\n{\ntest: /.(jpe?g|png|gif|svg)$/,\nloader: 'image-webpack-loader',\n// This will apply the loader before the other ones\nenforce: 'pre',\n},\n],\n},\n};")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n加载程序的默认设置已经可以使用了-但是如果您想进一步配置它，请参阅[插件选项](https://github.com/tcoopman/image-webpack-loader#options)。要选择要指定的选项，请查看 Addy Osmani 出色的[图像优化指南](https://images.guide/)。\n\n### 进一步阅读\n\n- [“ base64 编码用于什么？”](https://stackoverflow.com/questions/201479/what-is-base-64-encoding-used-for)\n- Addy Osmani 的[图像优化指南](https://images.guide/)\n\n## 优化依赖关系\n\nJavaScript 平均大小的一半以上来自于依赖关系，而该大小的一部分可能就不必要了。\n\n例如，Lodash（从 v4.17.4 版本开始）向捆绑包添加了 72 KB 的缩小代码。但是，如果仅使用 20 种方法，那么大约 65 KB 的缩小代码将无济于事。\n\n另一个示例是 Moment.js。其 2.19.1 版本需要 223 KB 的精简代码，这是巨大的– [2017 年 10 月，](http://httparchive.org/interesting.php?a=All&l=Oct 16 2017)页面上 JavaScript 的平均大小[为 452 KB](http://httparchive.org/interesting.php?a=All&l=Oct 16 2017)。但是，该大小的 170 KB 是[本地化文件](https://github.com/moment/moment/tree/4caa268356434f3ae9b5041985d62a0e8c246c78/locale)。如果您不使用多种语言的 Moment.js，这些文件将毫无目的地膨胀。\n\n所有这些依赖关系都可以轻松优化。我们已经在 GitHub 存储库中收集了优化方法- 快来[查看](https://github.com/GoogleChromeLabs/webpack-libs-optimizations)！\n\n## 为 ES 模块启用模块串联（又名示波器吊装）\n\n**注意：**如果您在[生产模式下](https://developers.google.cn/web/fundamentals/performance/webpack/decrease-frontend-size#enable-the-production-mode)使用[webpack 4，则](https://developers.google.cn/web/fundamentals/performance/webpack/decrease-frontend-size#enable-the-production-mode)模块连接已启用。随时跳过此部分。\n\n构建包时，webpack 会将每个模块包装为一个函数：\n\n")])])]),t("p",[e._v("// index.js\nimport {render} from './comments.js';\nrender();")]),e._v(" "),t("p",[e._v("// comments.js\nexport function render(data, target) {\nconsole.log('Rendered!');\n}")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n↓\n\n")])])]),t("p",[e._v("// bundle.js (part of)\n/_ 0 _/\n(function(module, "),t("strong",[e._v("webpack_exports")]),e._v(", "),t("strong",[e._v("webpack_require")]),e._v(") {")]),e._v(" "),t("p",[e._v('"use strict";\nObject.defineProperty('),t("strong",[e._v("webpack_exports")]),e._v(', "'),t("strong",[e._v('esModule", { value: true });\nvar '),t("strong",[e._v("WEBPACK_IMPORTED_MODULE_0")]),e._v("comments_js")]),e._v(" = "),t("strong",[e._v("webpack_require")]),e._v("(1);\nObject("),t("strong",[e._v("WEBPACK_IMPORTED_MODULE_0")]),e._v('comments_js__["a" /* render */])();')]),e._v(" "),t("p",[e._v("}),\n/_ 1 _/\n(function(module, "),t("strong",[e._v("webpack_exports")]),e._v(", "),t("strong",[e._v("webpack_require")]),e._v(") {")]),e._v(" "),t("p",[e._v('"use strict";\n'),t("strong",[e._v("webpack_exports")]),e._v("[\"a\"] = render;\nfunction render(data, target) {\nconsole.log('Rendered!');\n}")]),e._v(" "),t("p",[e._v("})")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n过去，将 CommonJS / AMD 模块彼此隔离是必需的。但是，这增加了每个模块的大小和性能开销。\n\nWebpack 2 引入了对 ES 模块的支持，与 CommonJS 和 AMD 模块不同，该 ES 模块可以捆绑在一起而无需将每个函数包装在一起。webpack 3 通过[模块串联](https://webpack.js.org/plugins/module-concatenation-plugin/)使这种捆绑成为可能 。以下是模块串联的作用：\n\n")])])]),t("p",[e._v("// index.js\nimport {render} from './comments.js';\nrender();")]),e._v(" "),t("p",[e._v("// comments.js\nexport function render(data, target) {\nconsole.log('Rendered!');\n}")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n↓\n\n")])])]),t("p",[e._v("// Unlike the previous snippet, this bundle has only one module\n// which includes the code from both files")]),e._v(" "),t("p",[e._v("// bundle.js (part of; compiled with ModuleConcatenationPlugin)\n/_ 0 _/\n(function(module, "),t("strong",[e._v("webpack_exports")]),e._v(", "),t("strong",[e._v("webpack_require")]),e._v(") {")]),e._v(" "),t("p",[e._v('"use strict";\nObject.defineProperty('),t("strong",[e._v("webpack_exports")]),e._v(', "__esModule", { value: true });')]),e._v(" "),t("p",[e._v("// CONCATENATED MODULE: ./comments.js\nfunction render(data, target) {\nconsole.log('Rendered!');\n}")]),e._v(" "),t("p",[e._v("// CONCATENATED MODULE: ./index.js\nrender();")]),e._v(" "),t("p",[e._v("})")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n看到不同？在普通捆绑中，模块 0 是`render`模块 1 所需要的。通过模块串联，`require`只需将其替换为所需的功能，然后删除模块 1。该捆绑软件具有更少的模块，并且模块开销也更少！\n\n要打开此行为，请**在 webpack 4**中启用以下`optimization.concatenateModules`选项：\n\n")])])]),t("p",[e._v("// webpack.config.js (for webpack 4)\nmodule.exports = {\noptimization: {\nconcatenateModules: true,\n},\n};")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n**在 webpack 3 中，**使用`ModuleConcatenationPlugin`：\n\n")])])]),t("p",[e._v("// webpack.config.js (for webpack 3)\nconst webpack = require('webpack');")]),e._v(" "),t("p",[e._v("module.exports = {\nplugins: [\nnew webpack.optimize.ModuleConcatenationPlugin(),\n],\n};")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n**注意：不**知道为什么默认情况下不启用此行为？串联模块很酷，[但是增加了构建时间，并且中断了热模块的更换](https://twitter.com/TheLarkInn/status/925800563144454144)。这就是为什么只能在生产中启用它的原因。\n\n### 进一步阅读\n\n- [用于](https://webpack.js.org/plugins/module-concatenation-plugin/) ModuleConcatenationPlugin 的 Webpack 文档\n- [“示波器吊装简介”](https://medium.com/webpack/brief-introduction-to-scope-hoisting-in-webpack-8435084c171f)\n- [此插件功能的](https://medium.com/webpack/webpack-freelancing-log-book-week-5-7-4764be3266f5)详细说明\n\n## 使用`externals`，如果你同时拥有的 WebPack 和非的 WebPack 码\n\n您可能有一个大型项目，其中某些代码是使用 webpack 编译的，而有些则不是。就像视频托管网站一样，播放器小部件可能是使用 webpack 构建的，而周围的页面可能不是：\n\n![视频托管网站的屏幕截图](https://developers.google.cn/web/fundamentals/performance/webpack/video-hosting.png)（完全随机的视频托管网站）\n\n如果这两段代码都具有共同的依赖性，则可以共享它们，以避免多次下载它们的代码。这是通过[webpack 的`externals` 选项](https://webpack.js.org/configuration/externals/)完成[的](https://webpack.js.org/configuration/externals/) -用变量或其他外部导入替换模块。\n\n### 如果依赖项在 `window`\n\n如果您的非 webpack 代码依赖于，可以将其作为变量中的依赖项，则将`window`别名依赖项名称别名为变量名：\n\n")])])]),t("p",[e._v("// webpack.config.js\nmodule.exports = {\nexternals: {\n'react': 'React',\n'react-dom': 'ReactDOM',\n},\n};")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n使用此配置，webpack 将不会捆绑`react`和`react-dom`打包。相反，它们将被替换为以下内容：\n\n")])])]),t("p",[e._v("// bundle.js (part of)\n(function(module, exports) {\n// A module that exports "),t("code",[e._v("window.React")]),e._v(". Without "),t("code",[e._v("externals")]),e._v(",\n// this module would include the whole React bundle\nmodule.exports = React;\n}),\n(function(module, exports) {\n// A module that exports "),t("code",[e._v("window.ReactDOM")]),e._v(". Without "),t("code",[e._v("externals")]),e._v(",\n// this module would include the whole ReactDOM bundle\nmodule.exports = ReactDOM;\n})")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n### 如果依赖项作为 AMD 软件包加载\n\n如果您的非 Webpack 代码没有将依赖项公开给`window`，则情况会更加复杂。但是，如果非 webpack 代码将这些依赖项作为[AMD 软件包使用](http://requirejs.org/docs/whyamd.html#amd)，则仍然可以避免两次加载相同的代码。\n\n为此，请将 webpack 代码作为 AMD 捆绑包和别名模块编译为库 URL：\n\n")])])]),t("p",[e._v("// webpack.config.js\nmodule.exports = {\noutput: { libraryTarget: 'amd' },")]),e._v(" "),t("p",[e._v("externals: {\n'react': { amd: '/libraries/react.min.js' },\n'react-dom': { amd: '/libraries/react-dom.min.js' },\n},\n};")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\nWebpack 将把捆绑包包装起来`define()`并使其依赖于以下 URL：\n\n")])])]),t("p",[e._v('// bundle.js (beginning)\ndefine(["/libraries/react.min.js", "/libraries/react-dom.min.js"], function () { … });')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n如果非 webpack 代码使用相同的 URL 来加载其依赖项，则这些文件将仅被加载一次-其他请求将使用加载器缓存。\n\n**注意：**Webpack 仅替换与`externals`对象键完全匹配的那些导入。这意味着，如果您编写`import React from 'react/umd/react.production.min.js'`，则该库不会从捆绑软件中排除。这是合理的-的 WebPack 不知道，如果`import 'react'`和 `import 'react/umd/react.production.min.js'`是相同的东西-所以请小心。\n\n### 进一步阅读\n\n- 的 WebPack 文档[上`externals`](https://webpack.js.org/configuration/externals/)\n\n## 加起来\n\n- 如果使用 webpack 4，请启用生产模式\n- 使用捆绑包级别的压缩器和加载器选项将代码最小化\n- 通过替换`NODE_ENV`为删除仅开发代码`production`\n- 使用 ES 模块启用摇树\n- 压缩影像\n- 应用特定于依赖项的优化\n- 启用模块串联\n- 使用`externals`，如果这是有道理的，你\n")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);